plugins {
//    alias(libs.plugins.androidApplication)
    id 'com.android.library'

}

def versionMajor = 0
def versionMinor = 41
def versionPatch = 11

android {
    namespace 'com.kit.biometricsdk'
    compileSdk 34

    defaultConfig {
//        applicationId "com.kit.biometricsdk"
//        applicationId "com.karooth.bio"
        minSdk 24
        targetSdk 34

        version genVersion(versionMajor, versionMinor, versionPatch)
        versionCode genVersionCode(versionMajor, versionMinor, versionPatch)
        versionName genVersionName(versionMajor, versionMinor, versionPatch)

        buildConfigField "String", "VERSION_NAME", "\"$versionName\""
        //DermalogFingerCode3 and DermalogNistQualityCheck require a license if no DERMALOG scanner is attached (e.g. SVT4500SE and SVT5008).
        buildConfigField "String", "LICENSE", "\"eyJ2ZXJzaW9uIjoxLCJjcmVhdGVkIjoiMjAyNC0wOC0xNCIsImN1c3RvbWVyIjoiZmFpc2FsQGthcm9vdGhpdGJkLmNvbSIsIm9yZGVyIjoiaHR0cHM6Ly90aWNrZXQuZGMuZGVybWFsb2cuY29tL290cnMvaW5kZXgucGw/QWN0aW9uPUFnZW50VGlja2V0Wm9vbTtUaWNrZXRJRD0xMTA4MCM5MjUxMSIsImxpY2Vuc2VUeXBlIjoiQVBQTElDQVRJT04iLCJsaWNlbnNlSWQiOiIzZWFjYjMwYmExZTUyOGEzMGRiYjM4Njg4N2ExOTI1NWMwMWMxYmFmNGY1ODg5YzE4OTcwZDU0OWNkNmNmOTA5Iiwib3MiOiJBbmRyb2lkIiwic2RrcyI6W3sicHJvZHVjdElkIjoxMTAxMDAyLCJkZXNjcmlwdGlvbiI6IkZpbmdlckNvZGUzIn1dfQ==.MEUCIBfh0aejrV2L54sLUHiGRLrIVDhlHyw5ZhFoyaIBsmAhAiEAgtfwbeBN9H2NzdS0OlxFt1JvNEtucWYIoxMv31L6f50=\""
        buildConfigField "String", "HALDEVICE", "\"\""
        setProperty("archivesBaseName", "BiometricSDK-Dermalog-v$versionName")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'arm64-v8a'
        }

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }

    }

    packagingOptions {
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
        pickFirst "lib/x86/libc++_shared.so"
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libusb1.0.so"
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/nfiq/CMakeLists.txt"
        }
    }


    buildTypes {
        release {
            minifyEnabled true
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_version_name_bc", "Version: ${defaultConfig.versionName}"
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_version_name_bc", "Version: ${defaultConfig.versionName}"
        }
    }

//    applicationVariants.all { variant ->
//        variant.outputs.all {
//
//            outputFileName = "${"bio-sdk"}-${variant.versionName}-${variant.buildType.name}.aar"
//        }
//
//        buildConfigField "String", 'BASE_URL', '"https://api.xdb-solutions.com/"'
//        buildConfigField "String", 'BASE_URL_STAGE', '"https://api.xdb-solutions.com/"'
//
//    }

    buildFeatures{
        aidl true
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation files('libs/FDxSDKProFDAndroid.jar')
    implementation files('libs/DermalogFormatCoversionCBEFF-1.2.27.2422.jar')

    implementation "com.dermalog.android:DermalogHardwareDevicesCommon:2.+"
    implementation 'com.dermalog.android.biometricpassportsdk:DermalogBiometricPassportSdk:1.+'
    implementation 'com.dermalog.android:DermalogImageContainer:2.+'
    implementation 'com.dermalog.android:DermalogFingerCode3:4.+'

    //SVT5008 uses a Integrated Biometrics or Suprema fingerprint scanner
    implementation "com.dermalog.android:DermalogHardwareSVT5008:1.+"
    implementation "com.dermalog.android.biometricpassportsdk:DermalogBPSupremaBioMiniPlugin:1.+"
    ////Photo Capture
    implementation ("com.github.yalantis:ucrop:2.2.8")

///Fingerprint Capture Starts
//    implementation("com.google.code.gson:gson:2.8.6")
//    implementation("com.fasterxml.jackson.core:jackson-databind:2.10.2")
//    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.10.2")
//
//    implementation ("com.machinezoo.sourceafis:sourceafis:3.18.1")
//
//    implementation("it.unimi.dsi:fastutil:7.2.1")
//    implementation("com.machinezoo.noexception:noexception:1.4.4")
//    implementation("commons-io:commons-io:2.6")
//    implementation("net.sourceforge.streamsupport:streamsupport:1.6.1")
    implementation ("com.machinezoo.sourceafis:sourceafis:3.18.1")
    implementation("com.github.seamfix11:android-nfiq-calc:1.0.1")

//    implementation ("com.machinezoo.stagean:stagean:1.3.0")
//    implementation ("com.machinezoo.closeablescope:closeablescope:1.0.1")
//    implementation ("com.machinezoo.noexception:noexception:1.9.1")
//    implementation ("com.machinezoo.fingerprintio:fingerprintio:1.3.1")

    implementation ("it.unimi.dsi:fastutil:8.5.12")
    implementation ("commons-io:commons-io:2.15.0")
    implementation ("com.google.code.gson:gson:2.10.1")
    implementation ("com.fasterxml.jackson.core:jackson-databind:2.15.3")
    implementation ("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.15.3")
    implementation ("com.github.mhshams:jnbis:2.1.2")

///Fingerprint Capture Ends

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    implementation 'io.reactivex.rxjava3:rxjava:3.1.7' // Use the latest version
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'

    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation project(':OpenCV')
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")


}

def static genVersionCode(Integer major, Integer minor, Integer patch) {
    return major * 10000 + minor * 100 + patch
}

def static genVersionName(Integer major, Integer minor, Integer patch) {
    return "${major}.${minor}.${patch}"
}

def static genVersion(Integer major, Integer minor, Integer patch) {
    return major * 10000 + minor * 100 + patch
}
